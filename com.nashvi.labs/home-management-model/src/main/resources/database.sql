DROP TABLE IF EXISTS TRANSACTION;
DROP TABLE IF EXISTS LEDGER;
DROP TABLE IF EXISTS ADDRESS;
DROP TABLE IF exists USERS ;

CREATE TABLE USERS (
    USER_ID INT NOT NULL,
    USER_NAME VARCHAR(15) NOT NULL,
    PASSWORD VARCHAR(15) NOT NULL,
    CREATE_TIMESTAMP TIMESTAMP NOT NULL,
    LAST_LOGIN_TIMESTAMP TIMESTAMP,
    INVALID_ATTEMPTS INTEGER,
    STATUS CHAR(1) NOT NULL CHECK (STATUS IN ('A' , 'L', 'D')),
    PRIMARY KEY USER_ID_PK (USER_ID),
    UNIQUE KEY USER_NAME_UNIQUE (USER_NAME)
);



CREATE TABLE ADDRESS (
    ADDRESS_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    STREET VARCHAR(45) NOT NULL,
    CITY VARCHAR(45) NOT NULL,
    COUNTRY VARCHAR(45) NOT NULL,
    ZIP INT(11) NOT NULL,
    PHONE INT(12) NOT NULL,
    EMAIL VARCHAR(50) NOT NULL,
    PRIMARY KEY ADDRESS_ID_PK (ADDRESS_ID),
    CONSTRAINT ADDRESS_USER_ID_FK FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID)
        ON DELETE CASCADE ON UPDATE CASCADE
);



CREATE TABLE LEDGER (
    LEDGER_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    LEDGER_NAME VARCHAR(50) NOT NULL,
    LEDGER_TYPE CHAR(1) NOT NULL CHECK (LEDGER_TYPE IN ('I' , 'E')),
    PRIMARY KEY LEDGER_ID_PK (LEDGER_ID),
    CONSTRAINT USER_ID_FK FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    UNIQUE KEY LEDGER_NAME_UNIQUEUE (LEDGER_NAME)
);



CREATE TABLE TRANSACTION (
    TX_ID INT NOT NULL,
    TX_GROUP_ID VARCHAR(20) NOT NULL,
    TX_LEDGER_ID INT NOT NULL,
    TX_AMOUNT DOUBLE NOT NULL DEFAULT 0.0,
    TX_TYPE CHAR(1) NOT NULL CHECK (TX_TYPE IN ('D' , 'C')),
    TX_TIMESTAMP TIMESTAMP NOT NULL,
    TX_COMMENT VARCHAR(50),
    PRIMARY KEY TX_ID_PK (TX_ID),
    UNIQUE KEY TX_GROUP_ID_UNIQUE (TX_GROUP_ID),
    CONSTRAINT TX_LEDGER_ID_FK FOREIGN KEY (TX_LEDGER_ID)
        REFERENCES LEDGER (LEDGER_ID)
        ON DELETE CASCADE ON UPDATE CASCADE
);